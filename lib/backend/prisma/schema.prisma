generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model trabajadores {
  id                       String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_completo          String        @unique @db.VarChar
  estado_civil             String        @db.VarChar
  rut                      String        @unique @db.VarChar
  fecha_de_nacimiento      DateTime      @db.Date
  direccion                String        @db.VarChar
  correo_electronico       String        @unique @db.VarChar
  sistema_de_salud         String        @db.VarChar
  prevision_afp            String        @db.VarChar
  obra_en_la_que_trabaja   String        @db.VarChar
  rol_que_asume_en_la_obra String        @db.VarChar
  estado                   String        @db.VarChar
  comentarios              comentarios[]
  contratos                contratos[]
}

model contratos {
  id                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_trabajadores       String        @db.Uuid
  plazo_de_contrato     String        @db.VarChar
  estado                String        @db.VarChar
  fecha_de_contratacion DateTime      @db.Date
  anexos                anexos[]
  comentarios           comentarios[]
  trabajadores          trabajadores  @relation(fields: [id_trabajadores], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_contrato_trabajador")

  @@index([id_trabajadores], map: "idx_contratos_id_trabajadores")
}

model anexos {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_contrato       String        @db.Uuid
  fecha_de_creacion DateTime      @db.Date
  parametros        String        @default("") @db.VarChar
  contratos         contratos     @relation(fields: [id_contrato], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_anexo_contrato")
  comentarios       comentarios[]

  @@index([id_contrato], map: "idx_anexos_id_contrato")
}

model comentarios {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_trabajadores String       @db.Uuid
  id_contrato     String?      @db.Uuid
  fecha           DateTime     @db.Timestamp(6)
  comentario      String       @db.VarChar
  id_anexo        String?      @db.Uuid
  anexo           anexos?      @relation(fields: [id_anexo], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comentario_anexo")
  contrato        contratos?   @relation(fields: [id_contrato], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comentario_contrato")
  trabajadores    trabajadores @relation(fields: [id_trabajadores], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comentario_trabajador")

  @@index([id_anexo], map: "idx_comentarios_id_anexo")
  @@index([id_contrato], map: "idx_comentarios_id_contrato")
  @@index([id_trabajadores], map: "idx_comentarios_id_trabajadores")
}

/// Prisma para model epp
model epp {
  id                  Int       @id @default(autoincrement())
  tipo                String
  obras_asignadas     String[]
  cantidad            Int
  certificado_id      String?
  fecha_registro      DateTime  @default(now())
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model proveedores {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rut                String              @unique @db.VarChar
  direccion          String?             @db.VarChar
  correo_vendedor    String?             @db.VarChar
  telefono_vendedor  String?             @db.VarChar
  fecha_registro     DateTime?           @db.Date
  nombre_vendedor    String?             @db.VarChar
  producto_servicio  String?             @db.VarChar
  credito_disponible Int?
  estado             String?             @db.VarChar
  ordenesDeCompra    ordenes_de_compra[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model herramientas {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tipo        String    @db.VarChar
  estado      String    @db.VarChar
  garantia    DateTime? @db.Date
  cantidad    Int       @db.SmallInt
  obra_asig   String?   @db.VarChar
  asig_inicio DateTime? @db.Date
  asig_fin    DateTime? @db.Date
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model vehiculos {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patente            String   @unique @db.VarChar
  permiso_circ       String   @db.VarChar
  revision_tecnica   DateTime @db.Date
  revision_gases     DateTime @db.Date
  ultima_mantencion  DateTime @db.Date
  descripcion_mant   String?  @db.VarChar
  capacidad_kg       Int
  neumaticos         String   @db.VarChar
  rueda_repuesto     Boolean
  observaciones      String?  @db.VarChar
  estado             String   @db.VarChar
  proxima_mantencion DateTime @db.Date
}

model ordenes_de_compra {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  numero_orden      String      @unique @db.VarChar
  fecha_emision     DateTime    @db.Date
  centro_costo      String      @db.VarChar
  proveedorId       String      @db.Uuid
  itemizadoId       String?     @db.Uuid
  numero_cotizacion String      @db.VarChar
  nombre_servicio   String      @db.VarChar
  valor             Int
  descuento         Boolean
  notas_adicionales String?     @db.VarChar
  createdAt         DateTime    @default(now()) @db.Timestamp(6)
  updatedAt         DateTime    @default(now()) @updatedAt @db.Timestamp(6)
  estado            String      @default("Activo")
  numero_contacto   String?     @default("") @db.VarChar

  proveedor         proveedores @relation(fields: [proveedorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  itemizado         itemizados? @relation(fields: [itemizadoId], references: [id])
}



model pagos {
  id                  String   @id(map: "pagos_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre_mandante     String
  rut_mandante        String   @db.VarChar
  direccion_comercial String
  codigo              String
  servicio_ofrecido   String
  valor               Float
  plazo_pagar         DateTime @db.Date
  estado_pago         String
  fotografia_id       String
  tipo_pago           String
  sentido             Boolean
  visualizacion       String
  notificado          Boolean? @default(false)
}

model configuracion_notificaciones {
  id          Int @id(map: "configuracionnotificaciones_pkey") @default(autoincrement())
  diasantes   Int
  diasdespues Int
}

model itemizados {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre           String      @db.VarChar
  descripcion      String?     @db.VarChar
  monto_total      Int
  monto_disponible Int
  obraId           String      @db.Uuid @map("obraid")
  createdAt DateTime? @default(now()) @db.Timestamp(6) @map("createdat")
  updatedAt DateTime? @db.Timestamp(6) @map("updatedat")
  obra             obras       @relation(fields: [obraId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ordenes          ordenes_de_compra[]
}

model obras {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre      String       @db.VarChar
  descripcion String?      @db.VarChar
  estado      String?      @default("Activo") @db.VarChar
  createdat   DateTime?    @default(now()) @db.Timestamp(6)
  updatedat   DateTime?    @default(now()) @db.Timestamp(6)
  itemizados  itemizados[]
}